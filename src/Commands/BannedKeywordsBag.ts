/**
 * A container for banned keywords for variable names.
 */
export class BannedKeywordsBag {
    /**
     * Banned keywords, keyed in alphabetical order.
     */
    private bannedKeyWords: { [i: string]: Boolean };

    /**
     * Initalizes a new instance of the BannedKeywordsBag class.
     */
    constructor() {
        this.bannedKeyWords = {
            "BEGIN": false,
            "END": false,
            "__ENCODING__": false,
            "__FILE__": false,
            "__LINE__": false,
            "abstract": false,
            "acos": false,
            "add": false,
            "alias": false,
            "and": false,
            "any": false,
            "array": false,
            "as": false,
            "asin": false,
            "assert": false,
            "async": false,
            "atan": false,
            "await": false,
            "base": false,
            "bool": false,
            "boolean": false,
            "break": false,
            "byte": false,
            "case": false,
            "catch": false,
            "char": false,
            "checked": false,
            "class": false,
            "close": false,
            "const": false,
            "constructor": false,
            "continue": false,
            "cos": false,
            "debugger": false,
            "decimal": false,
            "declare": false,
            "def": false,
            "default": false,
            "defined": false,
            "del": false,
            "delegate": false,
            "delete": false,
            "do": false,
            "double": false,
            "e": false,
            "elif": false,
            "else": false,
            "elsif": false,
            "ensure": false,
            "enum": false,
            "event": false,
            "except": false,
            "exec": false,
            "exp": false,
            "explicit": false,
            "export": false,
            "extends": false,
            "extern": false,
            "fabs": false,
            "false": false,
            "final": false,
            "finally": false,
            "fixed": false,
            "floor": false,
            "for": false,
            "foreach": false,
            "from": false,
            "function": false,
            "get": false,
            "global": false,
            "goto": false,
            "if": false,
            "implements": false,
            "implicit": false,
            "import": false,
            "in": false,
            "input": false,
            "instanceof": false,
            "interaface": false,
            "interface": false,
            "internal": false,
            "is": false,
            "lambda": false,
            "let": false,
            "lock": false,
            "log": false,
            "log10": false,
            "long": false,
            "module": false,
            "namespace": false,
            "native": false,
            "new": false,
            "next": false,
            "nil": false,
            "not": false,
            "null": false,
            "number": false,
            "object": false,
            "of": false,
            "open": false,
            "operator": false,
            "or": false,
            "out": false,
            "override": false,
            "package": false,
            "params": false,
            "partial": false,
            "pass": false,
            "pi": false,
            "print": false,
            "private": false,
            "protected": false,
            "public": false,
            "raise": false,
            "range": false,
            "readonly": false,
            "redo": false,
            "ref": false,
            "remove": false,
            "require": false,
            "rescue": false,
            "retry": false,
            "return": false,
            "sbyte": false,
            "sealed": false,
            "self": false,
            "set": false,
            "short": false,
            "sin": false,
            "sizeof": false,
            "sqrt": false,
            "stackalloc": false,
            "static": false,
            "strictfp": false,
            "string": false,
            "struct": false,
            "super": false,
            "switch": false,
            "symbol": false,
            "synchronized": false,
            "tan": false,
            "then": false,
            "this": false,
            "throw": false,
            "throwas": false,
            "throws": false,
            "transient": false,
            "true": false,
            "try": false,
            "type": false,
            "typeof": false,
            "uint": false,
            "ulong": false,
            "unchecked": false,
            "undef": false,
            "unless": false,
            "unsafe": false,
            "until": false,
            "ushort": false,
            "using": false,
            "value": false,
            "var": false,
            "virtual": false,
            "void": false,
            "volatile": false,
            "when": false,
            "where": false,
            "while": false,
            "with": false,
            "write": false,
            "yield": false,
            "zeros": false,
        };
    }

    /**
     * Returns whether the variable name is allowed.
     * 
     * @param name  The variable name
     * @returns A boolean determining the validity of the variable name.
     */
    public validBoolean(alias: string): boolean {
        if (this.bannedKeyWords.hasOwnProperty(alias)) {
            throw new Error(`Invalid variable name requested: '${alias}'.`);
        }

        return true;
    }
}
